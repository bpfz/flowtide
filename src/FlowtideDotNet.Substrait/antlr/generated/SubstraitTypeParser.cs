//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from SubstraitType.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class SubstraitTypeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		If=1, Then=2, Else=3, Boolean=4, I8=5, I16=6, I32=7, I64=8, FP32=9, FP64=10, 
		String=11, Binary=12, Timestamp=13, TimestampTZ=14, Date=15, Time=16, 
		IntervalYear=17, IntervalDay=18, UUID=19, Decimal=20, FixedChar=21, VarChar=22, 
		FixedBinary=23, Struct=24, NStruct=25, List=26, Map=27, ANY=28, And=29, 
		Or=30, Assign=31, Eq=32, NotEquals=33, Gte=34, Lte=35, Gt=36, Lt=37, Bang=38, 
		Plus=39, Minus=40, Asterisk=41, ForwardSlash=42, Percent=43, OBracket=44, 
		CBracket=45, OParen=46, CParen=47, SColon=48, Comma=49, QMark=50, Colon=51, 
		SingleQuote=52, Number=53, Identifier=54, LineComment=55, BlockComment=56, 
		Whitespace=57, Newline=58;
	public const int
		RULE_start = 0, RULE_scalarType = 1, RULE_parameterizedType = 2, RULE_numericParameter = 3, 
		RULE_anyType = 4, RULE_type = 5, RULE_expr = 6;
	public static readonly string[] ruleNames = {
		"start", "scalarType", "parameterizedType", "numericParameter", "anyType", 
		"type", "expr"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "':='", "'='", "'!='", "'>='", 
		"'<='", "'>'", "'<'", "'!'", "'+'", "'-'", "'*'", "'/'", "'%'", "'['", 
		"']'", "'('", "')'", "';'", "','", "'?'", "':'", "'''"
	};
	private static readonly string[] _SymbolicNames = {
		null, "If", "Then", "Else", "Boolean", "I8", "I16", "I32", "I64", "FP32", 
		"FP64", "String", "Binary", "Timestamp", "TimestampTZ", "Date", "Time", 
		"IntervalYear", "IntervalDay", "UUID", "Decimal", "FixedChar", "VarChar", 
		"FixedBinary", "Struct", "NStruct", "List", "Map", "ANY", "And", "Or", 
		"Assign", "Eq", "NotEquals", "Gte", "Lte", "Gt", "Lt", "Bang", "Plus", 
		"Minus", "Asterisk", "ForwardSlash", "Percent", "OBracket", "CBracket", 
		"OParen", "CParen", "SColon", "Comma", "QMark", "Colon", "SingleQuote", 
		"Number", "Identifier", "LineComment", "BlockComment", "Whitespace", "Newline"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SubstraitType.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SubstraitTypeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SubstraitTypeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SubstraitTypeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SubstraitTypeParser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			expr(0);
			State = 15;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarTypeContext : ParserRuleContext {
		public ScalarTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalarType; } }
	 
		public ScalarTypeContext() { }
		public virtual void CopyFrom(ScalarTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DateContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Date() { return GetToken(SubstraitTypeParser.Date, 0); }
		public DateContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitDate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SubstraitTypeParser.String, 0); }
		public StringContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class I64Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I64() { return GetToken(SubstraitTypeParser.I64, 0); }
		public I64Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterI64(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitI64(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitI64(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class I32Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I32() { return GetToken(SubstraitTypeParser.I32, 0); }
		public I32Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterI32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitI32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitI32(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalYearContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntervalYear() { return GetToken(SubstraitTypeParser.IntervalYear, 0); }
		public IntervalYearContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterIntervalYear(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitIntervalYear(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalYear(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UuidContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UUID() { return GetToken(SubstraitTypeParser.UUID, 0); }
		public UuidContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterUuid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitUuid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUuid(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class I8Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I8() { return GetToken(SubstraitTypeParser.I8, 0); }
		public I8Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterI8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitI8(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitI8(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class I16Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode I16() { return GetToken(SubstraitTypeParser.I16, 0); }
		public I16Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterI16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitI16(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitI16(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary() { return GetToken(SubstraitTypeParser.Binary, 0); }
		public BinaryContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntervalDayContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IntervalDay() { return GetToken(SubstraitTypeParser.IntervalDay, 0); }
		public IntervalDayContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterIntervalDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitIntervalDay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntervalDay(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Fp64Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FP64() { return GetToken(SubstraitTypeParser.FP64, 0); }
		public Fp64Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterFp64(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitFp64(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFp64(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Fp32Context : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FP32() { return GetToken(SubstraitTypeParser.FP32, 0); }
		public Fp32Context(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterFp32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitFp32(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFp32(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimeContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Time() { return GetToken(SubstraitTypeParser.Time, 0); }
		public TimeContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(SubstraitTypeParser.Boolean, 0); }
		public BooleanContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitBoolean(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolean(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimestampContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Timestamp() { return GetToken(SubstraitTypeParser.Timestamp, 0); }
		public TimestampContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTimestamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestamp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TimestampTzContext : ScalarTypeContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TimestampTZ() { return GetToken(SubstraitTypeParser.TimestampTZ, 0); }
		public TimestampTzContext(ScalarTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTimestampTz(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTimestampTz(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTimestampTz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScalarTypeContext scalarType() {
		ScalarTypeContext _localctx = new ScalarTypeContext(Context, State);
		EnterRule(_localctx, 2, RULE_scalarType);
		try {
			State = 33;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Boolean:
				_localctx = new BooleanContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 17;
				Match(Boolean);
				}
				break;
			case I8:
				_localctx = new I8Context(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 18;
				Match(I8);
				}
				break;
			case I16:
				_localctx = new I16Context(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 19;
				Match(I16);
				}
				break;
			case I32:
				_localctx = new I32Context(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 20;
				Match(I32);
				}
				break;
			case I64:
				_localctx = new I64Context(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 21;
				Match(I64);
				}
				break;
			case FP32:
				_localctx = new Fp32Context(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 22;
				Match(FP32);
				}
				break;
			case FP64:
				_localctx = new Fp64Context(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 23;
				Match(FP64);
				}
				break;
			case String:
				_localctx = new StringContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 24;
				Match(String);
				}
				break;
			case Binary:
				_localctx = new BinaryContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 25;
				Match(Binary);
				}
				break;
			case Timestamp:
				_localctx = new TimestampContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 26;
				Match(Timestamp);
				}
				break;
			case TimestampTZ:
				_localctx = new TimestampTzContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 27;
				Match(TimestampTZ);
				}
				break;
			case Date:
				_localctx = new DateContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 28;
				Match(Date);
				}
				break;
			case Time:
				_localctx = new TimeContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 29;
				Match(Time);
				}
				break;
			case IntervalDay:
				_localctx = new IntervalDayContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 30;
				Match(IntervalDay);
				}
				break;
			case IntervalYear:
				_localctx = new IntervalYearContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 31;
				Match(IntervalYear);
				}
				break;
			case UUID:
				_localctx = new UuidContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 32;
				Match(UUID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterizedTypeContext : ParserRuleContext {
		public ParameterizedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterizedType; } }
	 
		public ParameterizedTypeContext() { }
		public virtual void CopyFrom(ParameterizedTypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StructContext : ParameterizedTypeContext {
		public IToken isnull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Struct() { return GetToken(SubstraitTypeParser.Struct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SubstraitTypeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SubstraitTypeParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public StructContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NStructContext : ParameterizedTypeContext {
		public IToken isnull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NStruct() { return GetToken(SubstraitTypeParser.NStruct, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SubstraitTypeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SubstraitTypeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SubstraitTypeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SubstraitTypeParser.Comma, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public NStructContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterNStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitNStruct(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNStruct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VarCharContext : ParameterizedTypeContext {
		public IToken isnull;
		public NumericParameterContext len;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VarChar() { return GetToken(SubstraitTypeParser.VarChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterContext numericParameter() {
			return GetRuleContext<NumericParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public VarCharContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterVarChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitVarChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVarChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixedBinaryContext : ParameterizedTypeContext {
		public IToken isnull;
		public NumericParameterContext len;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FixedBinary() { return GetToken(SubstraitTypeParser.FixedBinary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterContext numericParameter() {
			return GetRuleContext<NumericParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public FixedBinaryContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterFixedBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitFixedBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedBinary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FixedCharContext : ParameterizedTypeContext {
		public IToken isnull;
		public NumericParameterContext len;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FixedChar() { return GetToken(SubstraitTypeParser.FixedChar, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterContext numericParameter() {
			return GetRuleContext<NumericParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public FixedCharContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterFixedChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitFixedChar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFixedChar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecimalContext : ParameterizedTypeContext {
		public IToken isnull;
		public NumericParameterContext precision;
		public NumericParameterContext scale;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(SubstraitTypeParser.Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SubstraitTypeParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterContext[] numericParameter() {
			return GetRuleContexts<NumericParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumericParameterContext numericParameter(int i) {
			return GetRuleContext<NumericParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public DecimalContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ListContext : ParameterizedTypeContext {
		public IToken isnull;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode List() { return GetToken(SubstraitTypeParser.List, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public ListContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MapContext : ParameterizedTypeContext {
		public IToken isnull;
		public ExprContext key;
		public ExprContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Map() { return GetToken(SubstraitTypeParser.Map, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma() { return GetToken(SubstraitTypeParser.Comma, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		public MapContext(ParameterizedTypeContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitMap(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMap(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterizedTypeContext parameterizedType() {
		ParameterizedTypeContext _localctx = new ParameterizedTypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameterizedType);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FixedChar:
				_localctx = new FixedCharContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 35;
				Match(FixedChar);
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 36;
					((FixedCharContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 39;
				Match(Lt);
				State = 40;
				((FixedCharContext)_localctx).len = numericParameter();
				State = 41;
				Match(Gt);
				}
				break;
			case VarChar:
				_localctx = new VarCharContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				Match(VarChar);
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 44;
					((VarCharContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 47;
				Match(Lt);
				State = 48;
				((VarCharContext)_localctx).len = numericParameter();
				State = 49;
				Match(Gt);
				}
				break;
			case FixedBinary:
				_localctx = new FixedBinaryContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 51;
				Match(FixedBinary);
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 52;
					((FixedBinaryContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 55;
				Match(Lt);
				State = 56;
				((FixedBinaryContext)_localctx).len = numericParameter();
				State = 57;
				Match(Gt);
				}
				break;
			case Decimal:
				_localctx = new DecimalContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 59;
				Match(Decimal);
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 60;
					((DecimalContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 63;
				Match(Lt);
				State = 64;
				((DecimalContext)_localctx).precision = numericParameter();
				State = 65;
				Match(Comma);
				State = 66;
				((DecimalContext)_localctx).scale = numericParameter();
				State = 67;
				Match(Gt);
				}
				break;
			case Struct:
				_localctx = new StructContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 69;
				Match(Struct);
				State = 71;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 70;
					((StructContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 73;
				Match(Lt);
				State = 74;
				expr(0);
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 75;
					Match(Comma);
					State = 76;
					expr(0);
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 82;
				Match(Gt);
				}
				break;
			case NStruct:
				_localctx = new NStructContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 84;
				Match(NStruct);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 85;
					((NStructContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 88;
				Match(Lt);
				State = 89;
				Match(Identifier);
				State = 90;
				expr(0);
				State = 96;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 91;
					Match(Comma);
					State = 92;
					Match(Identifier);
					State = 93;
					expr(0);
					}
					}
					State = 98;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 99;
				Match(Gt);
				}
				break;
			case List:
				_localctx = new ListContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 101;
				Match(List);
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 102;
					((ListContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 105;
				Match(Lt);
				State = 106;
				expr(0);
				State = 107;
				Match(Gt);
				}
				break;
			case Map:
				_localctx = new MapContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 109;
				Match(Map);
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==QMark) {
					{
					State = 110;
					((MapContext)_localctx).isnull = Match(QMark);
					}
				}

				State = 113;
				Match(Lt);
				State = 114;
				((MapContext)_localctx).key = expr(0);
				State = 115;
				Match(Comma);
				State = 116;
				((MapContext)_localctx).value = expr(0);
				State = 117;
				Match(Gt);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericParameterContext : ParserRuleContext {
		public NumericParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericParameter; } }
	 
		public NumericParameterContext() { }
		public virtual void CopyFrom(NumericParameterContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumericParameterNameContext : NumericParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SubstraitTypeParser.Identifier, 0); }
		public NumericParameterNameContext(NumericParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterNumericParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitNumericParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericParameterName(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericLiteralContext : NumericParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SubstraitTypeParser.Number, 0); }
		public NumericLiteralContext(NumericParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitNumericLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericExpressionContext : NumericParameterContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NumericExpressionContext(NumericParameterContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterNumericExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitNumericExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericParameterContext numericParameter() {
		NumericParameterContext _localctx = new NumericParameterContext(Context, State);
		EnterRule(_localctx, 6, RULE_numericParameter);
		try {
			State = 124;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new NumericLiteralContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 121;
				Match(Number);
				}
				break;
			case 2:
				_localctx = new NumericParameterNameContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 122;
				Match(Identifier);
				}
				break;
			case 3:
				_localctx = new NumericExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 123;
				expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY() { return GetToken(SubstraitTypeParser.ANY, 0); }
		public AnyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterAnyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitAnyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnyType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnyTypeContext anyType() {
		AnyTypeContext _localctx = new AnyTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_anyType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(ANY);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public IToken isnull;
		[System.Diagnostics.DebuggerNonUserCode] public ScalarTypeContext scalarType() {
			return GetRuleContext<ScalarTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterizedTypeContext parameterizedType() {
			return GetRuleContext<ParameterizedTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnyTypeContext anyType() {
			return GetRuleContext<AnyTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 10, RULE_type);
		try {
			State = 137;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Boolean:
			case I8:
			case I16:
			case I32:
			case I64:
			case FP32:
			case FP64:
			case String:
			case Binary:
			case Timestamp:
			case TimestampTZ:
			case Date:
			case Time:
			case IntervalYear:
			case IntervalDay:
			case UUID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				scalarType();
				State = 130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
				case 1:
					{
					State = 129;
					_localctx.isnull = Match(QMark);
					}
					break;
				}
				}
				break;
			case Decimal:
			case FixedChar:
			case VarChar:
			case FixedBinary:
			case Struct:
			case NStruct:
			case List:
			case Map:
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				parameterizedType();
				}
				break;
			case ANY:
				EnterOuterAlt(_localctx, 3);
				{
				State = 133;
				anyType();
				State = 135;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
				case 1:
					{
					State = 134;
					_localctx.isnull = Match(QMark);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfExprContext : ExprContext {
		public ExprContext ifExpr;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(SubstraitTypeParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Then() { return GetToken(SubstraitTypeParser.Then, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(SubstraitTypeParser.Else, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterIfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitIfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeLiteralContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public TypeLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTypeLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : ExprContext {
		public IToken text;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SingleQuote() { return GetTokens(SubstraitTypeParser.SingleQuote); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SingleQuote(int i) {
			return GetToken(SubstraitTypeParser.SingleQuote, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SubstraitTypeParser.Identifier, 0); }
		public StringLiteralContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultilineDefinitionContext : ExprContext {
		public TypeContext finalType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Identifier() { return GetTokens(SubstraitTypeParser.Identifier); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier(int i) {
			return GetToken(SubstraitTypeParser.Identifier, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Eq() { return GetTokens(SubstraitTypeParser.Eq); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq(int i) {
			return GetToken(SubstraitTypeParser.Eq, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Newline() { return GetTokens(SubstraitTypeParser.Newline); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Newline(int i) {
			return GetToken(SubstraitTypeParser.Newline, i);
		}
		public MultilineDefinitionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterMultilineDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitMultilineDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultilineDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryContext : ExprContext {
		public ExprContext ifExpr;
		public ExprContext thenExpr;
		public ExprContext elseExpr;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QMark() { return GetToken(SubstraitTypeParser.QMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SubstraitTypeParser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public TernaryContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTernary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExprContext : ExprContext {
		public ExprContext left;
		public IToken op;
		public ExprContext right;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(SubstraitTypeParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(SubstraitTypeParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(SubstraitTypeParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(SubstraitTypeParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lt() { return GetToken(SubstraitTypeParser.Lt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gt() { return GetToken(SubstraitTypeParser.Gt, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eq() { return GetToken(SubstraitTypeParser.Eq, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(SubstraitTypeParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Lte() { return GetToken(SubstraitTypeParser.Lte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Gte() { return GetToken(SubstraitTypeParser.Gte, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Asterisk() { return GetToken(SubstraitTypeParser.Asterisk, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ForwardSlash() { return GetToken(SubstraitTypeParser.ForwardSlash, 0); }
		public BinaryExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitBinaryExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TypeParamContext : ExprContext {
		public IToken identifier;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SubstraitTypeParser.Identifier, 0); }
		public TypeParamContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitTypeParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParam(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenExpressionContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(SubstraitTypeParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(SubstraitTypeParser.CParen, 0); }
		public ParenExpressionContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitParenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(SubstraitTypeParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OParen() { return GetToken(SubstraitTypeParser.OParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CParen() { return GetToken(SubstraitTypeParser.CParen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(SubstraitTypeParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(SubstraitTypeParser.Comma, i);
		}
		public FunctionCallContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExprContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Bang() { return GetToken(SubstraitTypeParser.Bang, 0); }
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralNumberContext : ExprContext {
		public IToken number;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number() { return GetToken(SubstraitTypeParser.Number, 0); }
		public LiteralNumberContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.EnterLiteralNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISubstraitTypeListener typedListener = listener as ISubstraitTypeListener;
			if (typedListener != null) typedListener.ExitLiteralNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISubstraitTypeVisitor<TResult> typedVisitor = visitor as ISubstraitTypeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralNumber(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new ParenExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 140;
				Match(OParen);
				State = 141;
				expr(0);
				State = 142;
				Match(CParen);
				}
				break;
			case 2:
				{
				_localctx = new MultilineDefinitionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 144;
				Match(Identifier);
				State = 145;
				Match(Eq);
				State = 146;
				expr(0);
				State = 148;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 147;
					Match(Newline);
					}
					}
					State = 150;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==Newline );
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Identifier) {
					{
					{
					State = 152;
					Match(Identifier);
					State = 153;
					Match(Eq);
					State = 154;
					expr(0);
					State = 156;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 155;
						Match(Newline);
						}
						}
						State = 158;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==Newline );
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 165;
				((MultilineDefinitionContext)_localctx).finalType = type();
				State = 169;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 166;
						Match(Newline);
						}
						} 
					}
					State = 171;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,19,Context);
				}
				}
				break;
			case 3:
				{
				_localctx = new TypeLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172;
				type();
				}
				break;
			case 4:
				{
				_localctx = new LiteralNumberContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173;
				((LiteralNumberContext)_localctx).number = Match(Number);
				}
				break;
			case 5:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 174;
				Match(SingleQuote);
				State = 175;
				((StringLiteralContext)_localctx).text = Match(Identifier);
				State = 176;
				Match(SingleQuote);
				}
				break;
			case 6:
				{
				_localctx = new TypeParamContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177;
				((TypeParamContext)_localctx).identifier = Match(Identifier);
				}
				break;
			case 7:
				{
				_localctx = new FunctionCallContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 178;
				Match(Identifier);
				State = 179;
				Match(OParen);
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 31595841550548978L) != 0)) {
					{
					State = 180;
					expr(0);
					State = 185;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==Comma) {
						{
						{
						State = 181;
						Match(Comma);
						State = 182;
						expr(0);
						}
						}
						State = 187;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 190;
				Match(CParen);
				}
				break;
			case 8:
				{
				_localctx = new IfExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 191;
				Match(If);
				State = 192;
				((IfExprContext)_localctx).ifExpr = expr(0);
				State = 193;
				Match(Then);
				State = 194;
				((IfExprContext)_localctx).thenExpr = expr(0);
				State = 195;
				Match(Else);
				State = 196;
				((IfExprContext)_localctx).elseExpr = expr(3);
				}
				break;
			case 9:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 198;
				Match(Bang);
				}
				State = 199;
				expr(2);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 213;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 211;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
					case 1:
						{
						_localctx = new BinaryExprContext(new ExprContext(_parentctx, _parentState));
						((BinaryExprContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 202;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 203;
						((BinaryExprContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8518530760704L) != 0)) ) {
							((BinaryExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 204;
						((BinaryExprContext)_localctx).right = expr(5);
						}
						break;
					case 2:
						{
						_localctx = new TernaryContext(new ExprContext(_parentctx, _parentState));
						((TernaryContext)_localctx).ifExpr = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 205;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 206;
						Match(QMark);
						State = 207;
						((TernaryContext)_localctx).thenExpr = expr(0);
						State = 208;
						Match(Colon);
						State = 209;
						((TernaryContext)_localctx).elseExpr = expr(2);
						}
						break;
					}
					} 
				}
				State = 215;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 4);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,217,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,3,1,34,8,1,1,2,1,2,3,2,38,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,46,8,2,1,2,
		1,2,1,2,1,2,1,2,1,2,3,2,54,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,62,8,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,72,8,2,1,2,1,2,1,2,1,2,5,2,78,8,2,10,2,
		12,2,81,9,2,1,2,1,2,1,2,1,2,3,2,87,8,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,95,
		8,2,10,2,12,2,98,9,2,1,2,1,2,1,2,1,2,3,2,104,8,2,1,2,1,2,1,2,1,2,1,2,1,
		2,3,2,112,8,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,120,8,2,1,3,1,3,1,3,3,3,125,
		8,3,1,4,1,4,1,5,1,5,3,5,131,8,5,1,5,1,5,1,5,3,5,136,8,5,3,5,138,8,5,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,149,8,6,11,6,12,6,150,1,6,1,6,1,
		6,1,6,4,6,157,8,6,11,6,12,6,158,5,6,161,8,6,10,6,12,6,164,9,6,1,6,1,6,
		5,6,168,8,6,10,6,12,6,171,9,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,5,6,184,8,6,10,6,12,6,187,9,6,3,6,189,8,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,3,6,201,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,212,
		8,6,10,6,12,6,215,9,6,1,6,0,1,12,7,0,2,4,6,8,10,12,0,1,3,0,29,30,32,37,
		39,42,263,0,14,1,0,0,0,2,33,1,0,0,0,4,119,1,0,0,0,6,124,1,0,0,0,8,126,
		1,0,0,0,10,137,1,0,0,0,12,200,1,0,0,0,14,15,3,12,6,0,15,16,5,0,0,1,16,
		1,1,0,0,0,17,34,5,4,0,0,18,34,5,5,0,0,19,34,5,6,0,0,20,34,5,7,0,0,21,34,
		5,8,0,0,22,34,5,9,0,0,23,34,5,10,0,0,24,34,5,11,0,0,25,34,5,12,0,0,26,
		34,5,13,0,0,27,34,5,14,0,0,28,34,5,15,0,0,29,34,5,16,0,0,30,34,5,18,0,
		0,31,34,5,17,0,0,32,34,5,19,0,0,33,17,1,0,0,0,33,18,1,0,0,0,33,19,1,0,
		0,0,33,20,1,0,0,0,33,21,1,0,0,0,33,22,1,0,0,0,33,23,1,0,0,0,33,24,1,0,
		0,0,33,25,1,0,0,0,33,26,1,0,0,0,33,27,1,0,0,0,33,28,1,0,0,0,33,29,1,0,
		0,0,33,30,1,0,0,0,33,31,1,0,0,0,33,32,1,0,0,0,34,3,1,0,0,0,35,37,5,21,
		0,0,36,38,5,50,0,0,37,36,1,0,0,0,37,38,1,0,0,0,38,39,1,0,0,0,39,40,5,37,
		0,0,40,41,3,6,3,0,41,42,5,36,0,0,42,120,1,0,0,0,43,45,5,22,0,0,44,46,5,
		50,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,5,37,0,0,48,49,
		3,6,3,0,49,50,5,36,0,0,50,120,1,0,0,0,51,53,5,23,0,0,52,54,5,50,0,0,53,
		52,1,0,0,0,53,54,1,0,0,0,54,55,1,0,0,0,55,56,5,37,0,0,56,57,3,6,3,0,57,
		58,5,36,0,0,58,120,1,0,0,0,59,61,5,20,0,0,60,62,5,50,0,0,61,60,1,0,0,0,
		61,62,1,0,0,0,62,63,1,0,0,0,63,64,5,37,0,0,64,65,3,6,3,0,65,66,5,49,0,
		0,66,67,3,6,3,0,67,68,5,36,0,0,68,120,1,0,0,0,69,71,5,24,0,0,70,72,5,50,
		0,0,71,70,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,5,37,0,0,74,79,3,12,
		6,0,75,76,5,49,0,0,76,78,3,12,6,0,77,75,1,0,0,0,78,81,1,0,0,0,79,77,1,
		0,0,0,79,80,1,0,0,0,80,82,1,0,0,0,81,79,1,0,0,0,82,83,5,36,0,0,83,120,
		1,0,0,0,84,86,5,25,0,0,85,87,5,50,0,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,
		1,0,0,0,88,89,5,37,0,0,89,90,5,54,0,0,90,96,3,12,6,0,91,92,5,49,0,0,92,
		93,5,54,0,0,93,95,3,12,6,0,94,91,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,
		97,1,0,0,0,97,99,1,0,0,0,98,96,1,0,0,0,99,100,5,36,0,0,100,120,1,0,0,0,
		101,103,5,26,0,0,102,104,5,50,0,0,103,102,1,0,0,0,103,104,1,0,0,0,104,
		105,1,0,0,0,105,106,5,37,0,0,106,107,3,12,6,0,107,108,5,36,0,0,108,120,
		1,0,0,0,109,111,5,27,0,0,110,112,5,50,0,0,111,110,1,0,0,0,111,112,1,0,
		0,0,112,113,1,0,0,0,113,114,5,37,0,0,114,115,3,12,6,0,115,116,5,49,0,0,
		116,117,3,12,6,0,117,118,5,36,0,0,118,120,1,0,0,0,119,35,1,0,0,0,119,43,
		1,0,0,0,119,51,1,0,0,0,119,59,1,0,0,0,119,69,1,0,0,0,119,84,1,0,0,0,119,
		101,1,0,0,0,119,109,1,0,0,0,120,5,1,0,0,0,121,125,5,53,0,0,122,125,5,54,
		0,0,123,125,3,12,6,0,124,121,1,0,0,0,124,122,1,0,0,0,124,123,1,0,0,0,125,
		7,1,0,0,0,126,127,5,28,0,0,127,9,1,0,0,0,128,130,3,2,1,0,129,131,5,50,
		0,0,130,129,1,0,0,0,130,131,1,0,0,0,131,138,1,0,0,0,132,138,3,4,2,0,133,
		135,3,8,4,0,134,136,5,50,0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,138,1,
		0,0,0,137,128,1,0,0,0,137,132,1,0,0,0,137,133,1,0,0,0,138,11,1,0,0,0,139,
		140,6,6,-1,0,140,141,5,46,0,0,141,142,3,12,6,0,142,143,5,47,0,0,143,201,
		1,0,0,0,144,145,5,54,0,0,145,146,5,32,0,0,146,148,3,12,6,0,147,149,5,58,
		0,0,148,147,1,0,0,0,149,150,1,0,0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,
		162,1,0,0,0,152,153,5,54,0,0,153,154,5,32,0,0,154,156,3,12,6,0,155,157,
		5,58,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,1,0,0,0,158,159,1,0,0,
		0,159,161,1,0,0,0,160,152,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,162,
		163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,169,3,10,5,0,166,168,5,
		58,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,
		170,201,1,0,0,0,171,169,1,0,0,0,172,201,3,10,5,0,173,201,5,53,0,0,174,
		175,5,52,0,0,175,176,5,54,0,0,176,201,5,52,0,0,177,201,5,54,0,0,178,179,
		5,54,0,0,179,188,5,46,0,0,180,185,3,12,6,0,181,182,5,49,0,0,182,184,3,
		12,6,0,183,181,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,
		186,189,1,0,0,0,187,185,1,0,0,0,188,180,1,0,0,0,188,189,1,0,0,0,189,190,
		1,0,0,0,190,201,5,47,0,0,191,192,5,1,0,0,192,193,3,12,6,0,193,194,5,2,
		0,0,194,195,3,12,6,0,195,196,5,3,0,0,196,197,3,12,6,3,197,201,1,0,0,0,
		198,199,5,38,0,0,199,201,3,12,6,2,200,139,1,0,0,0,200,144,1,0,0,0,200,
		172,1,0,0,0,200,173,1,0,0,0,200,174,1,0,0,0,200,177,1,0,0,0,200,178,1,
		0,0,0,200,191,1,0,0,0,200,198,1,0,0,0,201,213,1,0,0,0,202,203,10,4,0,0,
		203,204,7,0,0,0,204,212,3,12,6,5,205,206,10,1,0,0,206,207,5,50,0,0,207,
		208,3,12,6,0,208,209,5,51,0,0,209,210,3,12,6,2,210,212,1,0,0,0,211,202,
		1,0,0,0,211,205,1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,
		0,214,13,1,0,0,0,215,213,1,0,0,0,25,33,37,45,53,61,71,79,86,96,103,111,
		119,124,130,135,137,150,158,162,169,185,188,200,211,213
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
